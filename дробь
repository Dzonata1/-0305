#include <iostream>
#include <numeric>  

class Fraction {
private:
    int numerator;
    int denominator;

   
    void simplify() {
        int gcd = std::gcd(numerator, denominator);
        numerator /= gcd;
        denominator /= gcd;
    }

public:
   
    Fraction(int num, int denom) : numerator(num), denominator(denom) {
        if (denominator == 0) {
            throw std::invalid_argument("Denominator cannot be zero.");
        }
        simplify();
    }

   
    void setFraction(int num, int denom) {
        numerator = num;
        denominator = denom;
        if (denominator == 0) {
            throw std::invalid_argument("Denominator cannot be zero.");
        }
        simplify();
    }

    
    Fraction operator+(const Fraction& other) const {
        int num = numerator * other.denominator + other.numerator * denominator;
        int denom = denominator * other.denominator;
        return Fraction(num, denom);
    }

   
    Fraction operator-(const Fraction& other) const {
        int num = numerator * other.denominator - other.numerator * denominator;
        int denom = denominator * other.denominator;
        return Fraction(num, denom);
    }

    
    Fraction operator*(const Fraction& other) const {
        int num = numerator * other.numerator;
        int denom = denominator * other.denominator;
        return Fraction(num, denom);
    }

   
    Fraction operator/(const Fraction& other) const {
        int num = numerator * other.denominator;
        int denom = denominator * other.numerator;
        if (denom == 0) {
            throw std::invalid_argument("Division by zero.");
        }
        return Fraction(num, denom);
    }

   
    friend std::ostream& operator<<(std::ostream& os, const Fraction& frac) {
        os << frac.numerator << '/' << frac.denominator;
        return os;
    }
};

int main() {
    try {
        Fraction fraction1(1, 3);
        Fraction fraction2(2, 5);

        std::cout << fraction1 << " + " << fraction2 << " = " << (fraction1 + fraction2) << std::endl;
        std::cout << fraction1 << " - " << fraction2 << " = " << (fraction1 - fraction2) << std::endl;
        std::cout << fraction1 << " * " << fraction2 << " = " << (fraction1 * fraction2) << std::endl;
        std::cout << fraction1 << " / " << fraction2 << " = " << (fraction1 / fraction2) << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }
    return 0;
}
